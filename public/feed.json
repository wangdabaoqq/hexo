{"title":"王西柚","description":"王西柚,昏昏沉沉,不知其所以然.","language":"","link":"https://wangdabaoqq.github.io/hexo-back-up","pubDate":"Mon, 30 Jul 2018 02:37:00 GMT","lastBuildDate":"Wed, 25 Jul 2018 10:24:35 GMT","generator":"hexo-generator-json-feed","webMaster":"王西柚","items":[{"title":"'underscore系列之\"'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/30/underscore系列之函数防抖/","description":"稍等","pubDate":"Mon, 30 Jul 2018 02:37:00 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/30/underscore系列之函数防抖/","category":"underscore.js"},{"title":"'underscore系列之throttle\"'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/25/underscore系列之函数节流/","description":"underscore函数节流前言 在说underscore函数节流之前, 还是明确概念, 什么是函数节流。函数节流简单来说就是&#39;开源节流&#39;, 什么意思呢？就是减少某个函数调用的太频繁, 降低频次。一般来讲, 对于dom的频繁操作会引起浏览器的重绘或者重排, 这个时候我们就可以来使用节流不要让他过快的操作dom, 从而页面渲染起来也会更加流畅。 举个场景: dom元素的移动与拖拽, 我默认都做过这个功能。对于dom元素的频繁拖拽, 对于一些性能不太好的浏览器(说的就是你IE)会有很大的损耗, 这个时候我们就可以适当的去降低这个事件的调用频次。 当然调用的频次也要有一个合适的阈值。不然也会引出意外的问题。。。 underscore函数throttle 上面提到了函数调用频次, 这个频次也就是调用时间, 所以在underscore中关于throttle函数是基于定时器与时间差来调用函数运行的频次。还有就是throttle函数接收三个参数, 关于最后一个参数我到最后再讲。 我们看下源码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455var now = Date.now || function() &#123; return new Date().getTime();&#125;;var throttle = function(func, wait, options) &#123; var timeout, context, args, result; var previous = 0; if (!options) options = &#123;&#125;; var later = function() &#123; previous = options.leading === false ? 0 : now(); timeout = null; result = func.apply(context, args); if (!timeout) context = args = null; &#125;; var throttled = function() &#123; var now = this.now(); if (!previous &amp;&amp; options.leading === false) previous = now; // console.log(previous) var remaining = wait - (now - previous); // console.log(remaining); // console.log(remaining) context = this; args = arguments; // remaining &gt; wait 表示客户端系统时间被调整过 if (remaining &lt;= 0 || remaining &gt; wait) &#123; if (timeout) &#123; clearTimeout(timeout); timeout = null; // timeout = null设置为null，不仅仅是为了防止内存泄漏，而是clearTimeout(timeout)后，timeout的值并不会清空，如果不设置为null，就不能根据!timeout设置下次的timeout &#125; previous = now; result = func.apply(context, args); // console.log(result) if (!timeout) context = args = null; // 这里不太明白, timeout 不是已经赋值为null了吗 // context = args = null; 引用值为空, 防止内存泄露。 &#125; else if (!timeout &amp;&amp; options.trailing !== false) &#123; // console.log(remaining); timeout = setTimeout(later, remaining); // console.log(later, remaining) &#125; return result; &#125;; throttled.cancel = function() &#123; clearTimeout(timeout); previous = 0; timeout = context = args = null; &#125;; return throttled;&#125;; var func = function () &#123; console.log('wangdaye')&#125;window.onscroll = throttle(func, 1000); 我从自己的角度分析下: 首先滚动进入throttle函数携带两个参数, 函数内定义变量先不管, 直接说throttled函数, 首先要获取当前时间, 然后就是计算时间差, 当然第一次调用我们肯定是不希望要延迟加载, 所以变量remaining一定是负值, 获取最新时间戳, 然后调用函数。当连续调用时, 变量remaining是一个正值, 然后定时器延迟调用later方法, 刷新时间戳, timeout为null。当等待一秒钟再次调用时remaining为负值, 且已经存在timeout, 所以清空上一次定时器, timeout并为null。 我再说说关于第三个参数, 第三个参数有两种调用方式, 第一种是, {leading: false}, 当传递的方式的为{leading: false}就会忽略scroll开始前的回调。第二种方式是, {trailing: false}, 当传递方式为{trailing: false}时, scroll结束时会被忽略。 最后我还是希望可以debugger或者console.log下, 自己多去理解下, 我相信就会更加明白关于函数节流的知识点。 就到这了。。。。 参考 underscore 函数节流的实现-hanzichi 浅谈javascript的函数节流","pubDate":"Wed, 25 Jul 2018 11:37:00 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/25/underscore系列之函数节流/","category":"underscore.js"},{"title":"'underscore系列之无耦合函数\"'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/20/underscore系列之无耦合函数/","description":"","pubDate":"Fri, 20 Jul 2018 08:37:00 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/20/underscore系列之无耦合函数/","category":"underscore.js"},{"title":"'Yellow + 流星'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/19/yellow+流星/","description":"","pubDate":"Thu, 19 Jul 2018 04:37:00 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/19/yellow+流星/","category":"yellow"},{"title":"'2018年中总结'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/09/年中总结/","description":"","pubDate":"Mon, 09 Jul 2018 05:37:00 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/09/年中总结/","category":"年中总结"},{"title":"'underscore系列之比较两个元素是否\"相同\"'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/09/underscore系列之比较两个元素是否\"相同\"/","description":"","pubDate":"Mon, 09 Jul 2018 05:37:00 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/07/09/underscore系列之比较两个元素是否\"相同\"/","category":"underscore.js"},{"title":"'我所知道的apply与call'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/06/13/我所知道的apoly与call/","description":"","pubDate":"Wed, 13 Jun 2018 06:24:00 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/06/13/我所知道的apoly与call/","category":"js,方法"},{"title":"'Chrome扩展程序'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/04/28/Chrome插件/","description":"","pubDate":"Sat, 28 Apr 2018 06:54:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/04/28/Chrome插件/","category":"插件"},{"title":"'Javascript异步与同步'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/04/23/Javascript异步与同步/","description":"","pubDate":"Mon, 23 Apr 2018 06:24:00 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/04/23/Javascript异步与同步/","category":"js,事件"},{"title":"'mousewheel与DOMMouseScroll'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/03/20/鼠标滚动事件兼容/","description":"","pubDate":"Tue, 20 Mar 2018 14:26:00 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/03/20/鼠标滚动事件兼容/","category":"事件兼容"},{"title":"'this的值到底是什么？'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/03/02/this的值到底是什么/","description":"","pubDate":"Fri, 02 Mar 2018 05:54:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/03/02/this的值到底是什么/","category":"关于this"},{"title":"'2017年度总结'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/02/22/2017年总结/","description":"","pubDate":"Thu, 22 Feb 2018 07:54:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/02/22/2017年总结/","category":"总结"},{"title":"music","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/01/14/我在未来等你/","description":"好妹妹-我在未来等你","pubDate":"Sun, 14 Jan 2018 08:38:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/01/14/我在未来等你/","category":"综合,music"},{"title":"music","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/01/12/你会爱我很久吗/","description":"秦昊-你会爱我很久吗","pubDate":"Fri, 12 Jan 2018 08:38:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/01/12/你会爱我很久吗/","category":"综合,music"},{"title":"'javascript-数组去重'","link":"https://wangdabaoqq.github.io/hexo-back-up/2018/01/10/数组去重/","description":"","pubDate":"Wed, 10 Jan 2018 07:15:15 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2018/01/10/数组去重/","category":"js,Array"},{"title":"'git命令(全)'","link":"https://wangdabaoqq.github.io/hexo-back-up/2017/10/01/git命令图(全)/","description":"git","pubDate":"Sun, 01 Oct 2017 14:02:12 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2017/10/01/git命令图(全)/","category":"git命令"},{"title":"'移动端资源整合部分'","link":"https://wangdabaoqq.github.io/hexo-back-up/2017/09/27/移动端/","description":"","pubDate":"Wed, 27 Sep 2017 15:09:56 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2017/09/27/移动端/","category":"web,移动端"},{"title":"'Javascript数组方法(ES5-ES6)'","link":"https://wangdabaoqq.github.io/hexo-back-up/2017/09/20/Javascript的数组方法/","description":"","pubDate":"Wed, 20 Sep 2017 14:30:12 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2017/09/20/Javascript的数组方法/","category":"javascript,Array方法"},{"title":"'面试题目'","link":"https://wangdabaoqq.github.io/hexo-back-up/2017/08/31/面试/","description":"","pubDate":"Wed, 30 Aug 2017 16:00:00 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2017/08/31/面试/","category":"面试"},{"title":"'Promise'","link":"https://wangdabaoqq.github.io/hexo-back-up/2017/08/10/promise/","description":"","pubDate":"Thu, 10 Aug 2017 02:54:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2017/08/10/promise/","category":"web,ES6"},{"title":"css3","link":"https://wangdabaoqq.github.io/hexo-back-up/2017/07/22/px转rem/","description":"","pubDate":"Sat, 22 Jul 2017 05:57:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2017/07/22/px转rem/","category":"综合,css3"},{"title":"music","link":"https://wangdabaoqq.github.io/hexo-back-up/2017/07/18/认错/","description":"认错-林志炫","pubDate":"Tue, 18 Jul 2017 10:30:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2017/07/18/认错/","category":"综合,music"},{"title":"windows-ubuntu","link":"https://wangdabaoqq.github.io/hexo-back-up/2017/06/29/windows-ubuntu/","description":"","pubDate":"Thu, 29 Jun 2017 05:30:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2017/06/29/windows-ubuntu/","category":"综合,服务器"},{"title":"技术贴","link":"https://wangdabaoqq.github.io/hexo-back-up/2017/04/15/技术贴/","description":"","pubDate":"Sat, 15 Apr 2017 05:30:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2017/04/15/技术贴/","category":"综合,技术"},{"title":"'福利 - 不过百行代码的爬虫爬取美女图'","link":"https://wangdabaoqq.github.io/hexo-back-up/2017/02/14/node爬虫/","description":"","pubDate":"Tue, 14 Feb 2017 01:54:48 GMT","guid":"https://wangdabaoqq.github.io/hexo-back-up/2017/02/14/node爬虫/","category":"web,node"}]}